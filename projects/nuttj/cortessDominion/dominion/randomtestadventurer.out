Performing card test for Adventurer
Test 1: treasure in deck: 0   treasure in discard: 2  total card drawn = 10
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 19  Ending handCount: 23
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 8  discardCount: 5
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 2: treasure in deck: 1   treasure in discard: 0  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 0: 1 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 1  Ending handCount: 4
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 1
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 3: treasure in deck: 1   treasure in discard: 0  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 0: 1 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 17  Ending handCount: 20
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 1
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 4: treasure in deck: 1   treasure in discard: 0  total card drawn = 3
TEST FAILED: Net gain in player's hand count should be 0: 1 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 11  Ending handCount: 12
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 1  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 1
TEST FAILED: The number of treasures in the player's hand should have increased by 1
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 5: treasure in deck: 2   treasure in discard: 0  total card drawn = -14
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 6  Ending handCount: 10
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 4  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 6: treasure in deck: 1   treasure in discard: 0  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 0: 1 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 18  Ending handCount: 21
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 1
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 7: treasure in deck: 2   treasure in discard: 0  total card drawn = 3
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 9  Ending handCount: 13
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 4  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 8: treasure in deck: 1   treasure in discard: 1  total card drawn = 6
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 11  Ending handCount: 15
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 4  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 9: treasure in deck: 2   treasure in discard: 0  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 19  Ending handCount: 23
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 19  discardCount: 16
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count hasPerforming card test for Adventurer
Test 1: treasure in deck: 1   treasure in discard: 1  total card drawn = 1
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 14  Ending handCount: 13
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: -1  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 2: treasure in deck: 2   treasure in discard: 0  total card drawn = -11
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 18  Ending handCount: 21
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 3: treasure in deck: 0   treasure in discard: 1  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 0: 1 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 4  Ending handCount: 7
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 1
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 4: treasure in deck: 1   treasure in discard: 1  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 13  Ending handCount: 16
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 5: treasure in deck: 2   treasure in discard: 0  total card drawn = -6
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 4  Ending handCount: 1
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: -3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 6: treasure in deck: 1   treasure in discard: 0  total card drawn = -12
TEST FAILED: Net gain in player's hand count should be 0: 1 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 20  Ending handCount: 6
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: -14  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 1
TEST FAILED: The number of treasures in the player's hand should have increased by 1
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 7: treasure in deck: 2   treasure in discard: 0  total card drawn = 2
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 14  Ending handCount: 17
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 8: treasure in deck: 0   treasure in discard: 1  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 0: 1 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 15  Ending handCount: 18
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 1
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 9: treasure in deck: 0   treasure in discard: 0  total card drawn = -11
TEST FAILED: Net gain in player's hand count should be -1: 0 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 14  Ending handCount: 1
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: -13  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
8 tests failed

Test 10: treasure in deck: 2   treasure in discard: 0  total card drawn = 3
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 12  Ending handCount: 15
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 11: treasure in deck: 0   treasure in discard: 1  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 0: 1 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 19  Ending handCount: 22
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 1
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 12: treasure in deck: 1   treasure in discard: 0  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 0: 1 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 8  Ending handCount: 11
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 1
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 13: treasure in deck: 2   treasure in discard: 0  total card drawn = -17
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 15  Ending handCount: 1
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: -14  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 14: treasure in deck: 2   treasure in discard: 0  total card drawn = -11
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 20  Ending handCount: 24
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 4  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 15: treasure in deck: 2   treasure in discard: 0  total card drawn = 19
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 17  Ending handCount: 21
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 24  discardCount: 21
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 16: treasure in deck: 1   treasure in discard: 1  total card drawn = 6
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 5  Ending handCount: 9
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 4  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 17: treasure in deck: 1   treasure in discard: 1  total card drawn = 6
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 2  Ending handCount: 6
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 4  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 18: treasure in deck: 0   treasure in discard: 1  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 0: 1 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 9  Ending handCount: 12
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 1
TEST FAILED: Player 1's hand count has been altered
TEST FAILPerforming card test for Adventurer
Test 1: treasure in deck: 2   treasure in discard: 0  total card drawn = -7
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 17  Ending handCount: 21
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 4  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 2: treasure in deck: 2   treasure in discard: 0  total card drawn = -5
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 6  Ending handCount: 9
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 3: treasure in deck: 0   treasure in discard: 1  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 0: 1 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 16  Ending handCount: 19
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 1
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 4: treasure in deck: 2   treasure in discard: 0  total card drawn = -4
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 17  Ending handCount: 20
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 5: treasure in deck: 1   treasure in discard: 0  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 0: 1 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 4  Ending handCount: 7
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 1
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 6: treasure in deck: 2   treasure in discard: 0  total card drawn = 2
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 11  Ending handCount: 14
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 7: treasure in deck: 0   treasure in discard: 2  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 14  Ending handCount: 17
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 8: treasure in deck: 0   treasure in discard: 1  total card drawn = -1
TEST FAILED: Net gain in player's hand count should be 0: 1 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 4  Ending handCount: 1
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: -3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 1
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 9: treasure in deck: 1   treasure in discard: 1  total card drawn = 16
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 17  Ending handCount: 21
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 14  discardCount: 11
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 10: treasure in deck: 2   treasure in discard: 0  total card drawn = 17
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 14  Ending handCount: 18
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 35  discardCount: 32
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 11: treasure in deck: 1   treasure in discard: 1  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 16  Ending handCount: 19
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 12: treasure in deck: 1   treasure in discard: 1  total card drawn = 23
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 10  Ending handCount: 14
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 21  discardCount: 18
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
8 tests failed

Test 13: treasure in deck: 0   treasure in discard: 0  total card drawn = 0
TEST FAILED: Net gain in player's hand count should be -1: 0 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 16  Ending handCount: 14
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: -2  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
8 tests failed

Test 14: treasure in deck: 0   treasure in discard: 2  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 6  Ending handCount: 9
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 15: treasure in deck: 1   treasure in discard: 0  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 0: 1 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 6  Ending handCount: 9
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 1
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 16: treasure in deck: 0   treasure in discard: 2  total card drawn = 18
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 5  Ending handCount: 9
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 16  discardCount: 13
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 17: treasure in deck: 2   treasure in discard: 0  total card drawn = 12
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 3  Ending handCount: 7
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 23  discardCount: 20
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 18: treasure in deck: 0   treasure in discard: 1  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 0: 1 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 15  Ending handCount: 18
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 1
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 19: treasure in deck: 0   treasure in discard: 0  total card drawn = -10
TEST FAILED: Net gain in player's hand count should be -1: 0 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 13  Ending handCount: 1
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: -12  discardCount: 1
TEST FAILED: Number of playPerforming card test for Adventurer
Test 1: treasure in deck: 2   treasure in discard: 0  total card drawn = -10
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 10  Ending handCount: 14
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 4  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 2: treasure in deck: 0   treasure in discard: 1  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 0: 1 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 2  Ending handCount: 5
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 1
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 3: treasure in deck: 2   treasure in discard: 0  total card drawn = -4
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 20  Ending handCount: 24
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 4  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 4: treasure in deck: 1   treasure in discard: 0  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 0: 1 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 10  Ending handCount: 13
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 1
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 5: treasure in deck: 1   treasure in discard: 0  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 0: 1 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 17  Ending handCount: 20
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 1
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 6: treasure in deck: 1   treasure in discard: 1  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 7  Ending handCount: 10
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 7: treasure in deck: 2   treasure in discard: 0  total card drawn = -6
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 13  Ending handCount: 17
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 4  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 8: treasure in deck: 2   treasure in discard: 0  total card drawn = -13
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 13  Ending handCount: 17
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 4  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 9: treasure in deck: 0   treasure in discard: 1  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 0: 1 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 16  Ending handCount: 19
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 1
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 10: treasure in deck: 0   treasure in discard: 1  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 0: 1 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 6  Ending handCount: 9
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
8 tests failed

Test 11: treasure in deck: 2   treasure in discard: 0  total card drawn = -3
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 15  Ending handCount: 19
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 14  discardCount: 11
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
8 tests failed

Test 12: treasure in deck: 1   treasure in discard: 1  total card drawn = 6
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 1  Ending handCount: 5
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 4  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 13: treasure in deck: 1   treasure in discard: 0  total card drawn = 2
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 1
TEST FAILED: The number of treasures in the player's hand should have increased by 1
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
8 tests failed

Test 14: treasure in deck: 1   treasure in discard: 1  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 6  Ending handCount: 9
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
8 tests failed

Test 15: treasure in deck: 0   treasure in discard: 0  total card drawn = 3
TEST FAILED: Net gain in player's hand count should be -1: 0 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 12  Ending handCount: 13
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 1  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 0
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 16: treasure in deck: 1   treasure in discard: 0  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 0: 1 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 12  Ending handCount: 15
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 1
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 17: treasure in deck: 1   treasure in discard: 0  total card drawn = 3
TEST FAILED: Net gain in player's hand count should be 0: 1 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 16  Ending handCount: 17
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 1  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 1
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 18: treasure in deck: 0   treasure in discard: 2  total card drawn = 19
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 15  Ending handCount: 19
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 17  discardCount: 14
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 19: treasure in deck: 0   treasure in discard: 0  total card drawn = 2
TEST FAILED: Net gain in player's hand count should be -1: 0 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 18  Ending handCount: 18
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 0  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 0
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count Performing card test for Adventurer
Test 1: treasure in deck: 1   treasure in discard: 0  total card drawn = -8
TEST FAILED: Net gain in player's hand count should be 0: 1 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 15  Ending handCount: 5
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: -10  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 1
TEST FAILED: The number of treasures in the player's hand should have increased by 1
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 2: treasure in deck: 1   treasure in discard: 1  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 11  Ending handCount: 14
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 3: treasure in deck: 0   treasure in discard: 2  total card drawn = 18
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 17  Ending handCount: 21
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 16  discardCount: 13
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 4: treasure in deck: 1   treasure in discard: 1  total card drawn = 28
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 5  Ending handCount: 9
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 26  discardCount: 23
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 5: treasure in deck: 1   treasure in discard: 1  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 5  Ending handCount: 8
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 6: treasure in deck: 0   treasure in discard: 2  total card drawn = 10
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 18  Ending handCount: 22
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 8  discardCount: 5
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
8 tests failed

Test 7: treasure in deck: 1   treasure in discard: 1  total card drawn = 17
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 1  Ending handCount: 5
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 15  discardCount: 12
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 8: treasure in deck: 2   treasure in discard: 0  total card drawn = 11
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 18  Ending handCount: 22
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 15  discardCount: 12
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 9: treasure in deck: 1   treasure in discard: 0  total card drawn = -8
TEST FAILED: Net gain in player's hand count should be 0: 1 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 14  Ending handCount: 4
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: -10  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 1
TEST FAILED: The number of treasures in the player's hand should have increased by 1
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 10: treasure in deck: 2   treasure in discard: 0  total card drawn = 0
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 18  Ending handCount: 22
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 4  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 11: treasure in deck: 2   treasure in discard: 0  total card drawn = 8
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 11  Ending handCount: 15
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 23  discardCount: 20
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 12: treasure in deck: 2   treasure in discard: 0  total card drawn = 9
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 20  Ending handCount: 24
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 8  discardCount: 5
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 13: treasure in deck: 1   treasure in discard: 1  total card drawn = 5
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 15  Ending handCount: 18
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 14: treasure in deck: 2   treasure in discard: 0  total card drawn = -12
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 6  Ending handCount: 10
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 4  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 15: treasure in deck: 2   treasure in discard: 0  total card drawn = -9
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 17  Ending handCount: 20
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
10 tests failed

Test 16: treasure in deck: 2   treasure in discard: 0  total card drawn = -2
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 11  Ending handCount: 14
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 3  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 17: treasure in deck: 2   treasure in discard: 0  total card drawn = 13
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 6  Ending handCount: 10
TEST FAILED: Number of discarded cards should be the original discard count plus number of cards drawn - 2 treasure cards  Expected #: 20  discardCount: 17
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's deck and discard should have decreased by 2
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 18: treasure in deck: 0   treasure in discard: 0  total card drawn = -5
TEST FAILED: Net gain in player's hand count should be -1: 0 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 15  Ending handCount: 8
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: -7  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 0
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Test 19: treasure in deck: 1   treasure in discard: 1  total card drawn = 15
TEST FAILED: Net gain in player's hand count should be 1: 2 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 8  Ending handCount: 12
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: 13  discardCount: 10
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
8 tests failed

Test 20: treasure in deck: 1   treasure in discard: 0  total card drawn = -7
TEST FAILED: Net gain in player's hand count should be 0: 1 drawn treasure cards and 1 discarded Adventurer Card  Starting handCount: 16  Ending handCount: 7
TEST FAILED: Number of discarded cards should be the number of cards drawn - 2 treasure cards  Expected # of discarded cards: -9  discardCount: 1
TEST FAILED: Number of played cards should hve increased by 1  Expected # of played cards: 1  playedCardCount: 2
TEST FAILED: Adventurer is not on top of the played card pile
TEST FAILED: The number of treasures in the player's hand should have increased by 1
TEST FAILED: Player 1's hand count has been altered
TEST FAILED: Player 1's deck count has been altered
TEST FAILED: Player 2's hand count has been altered
TEST FAILED: Player 2's deck count has been altered
9 tests failed

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:61.54% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:5.41% of 185
Branches executed:14.84% of 155
Taken at least once:1.29% of 155
Calls executed:7.55% of 53

Function 'smithyEffect'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 2

Function 'mineEffect'
Lines executed:0.00% of 15
Branches executed:0.00% of 14
Taken at least once:0.00% of 14
Calls executed:0.00% of 5

Function 'feastEffect'
Lines executed:93.75% of 16
Branches executed:100.00% of 10
Taken at least once:80.00% of 10
Calls executed:80.00% of 5

Function 'council_roomEffect'
Lines executed:100.00% of 9
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 3

Function 'adventurerEffect'
Lines executed:100.00% of 18
Branches executed:100.00% of 10
Taken at least once:100.00% of 10
Calls executed:100.00% of 3

Function 'getCost'
Lines executed:10.00% of 30
Branches executed:100.00% of 28
Taken at least once:3.57% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:85.48% of 62
Branches executed:100.00% of 46
Taken at least once:82.61% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:32.86% of 560
Branches executed:38.80% of 415
Taken at least once:22.89% of 415
Calls executed:23.71% of 97
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 2635 returned 100% blocks executed 100%
     2635:    8:int compare(const void* a, const void* b) {
     2635:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      713:   10:    return 1;
     1922:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
      891:   12:    return -1;
     1031:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 20 returned 100% blocks executed 89%
       20:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       20:   44:  SelectStream(1);
call    0 returned 100%
       20:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       20:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       20:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      220:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     2200:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     2000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       20:   73:  if (numPlayers == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       20:   77:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       20:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       20:   87:  if (numPlayers == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       20:   95:      state->supplyCount[estate] = 12;
       20:   96:      state->supplyCount[duchy] = 12;
       20:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       20:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       20:  102:  state->supplyCount[silver] = 40;
       20:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      420:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     3300:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     3100:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      200:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       80:  115:		  if (numPlayers == 2){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       40:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      160:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      200:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2900:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      100:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  139:    {
       80:  140:      state->deckCount[i] = 0;
      320:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      240:  143:	  state->deck[i][j] = estate;
      240:  144:	  state->deckCount[i]++;
        -:  145:	}
      640:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      560:  148:	  state->deck[i][j] = copper;
      560:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      100:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  155:    {
       80:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      100:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       80:  166:      state->handCount[i] = 0;
       80:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      560:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      540:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       20:  182:  state->outpostPlayed = 0;
       20:  183:  state->phase = 0;
       20:  184:  state->numActions = 1;
       20:  185:  state->numBuys = 1;
       20:  186:  state->playedCardCount = 0;
       20:  187:  state->whoseTurn = 0;
       20:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      120:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      100:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       20:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       20:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 239 returned 100% blocks executed 100%
      239:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      239:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      239:  209:  if (state->deckCount[player] < 1)
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
      131:  210:    return -1;
      108:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1478:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
     1262:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     1262:  216:    newDeck[newDeckPos] = state->deck[player][card];
     1262:  217:    newDeckPos++;
     5431:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
     4169:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     1262:  221:    state->deckCount[player]--;
        -:  222:  }
     1370:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
     1262:  224:    state->deck[player][i] = newDeck[i];
     1262:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      108:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 40 returned 100% blocks executed 100%
       40:  320:int supplyCount(int card, struct gameState *state) {
       40:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 20 returned 100% blocks executed 100%
       20:  346:int whoseTurn(struct gameState *state) {
       20:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 613 returned 100% blocks executed 100%
      613:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      613:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      547:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
      462:  534:      state->deck[player][i] = state->discard[player][i];
      462:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       85:  538:    state->deckCount[player] = state->discardCount[player];
       85:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       85:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       85:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       85:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       85:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       85:  559:    if (deckCounter == 0)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       57:  560:      return -1;
        -:  561:
       28:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       28:  563:    state->deckCount[player]--;
       28:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      528:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      528:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      528:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      528:  576:    state->deckCount[player]--;
      528:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      556:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 20 returned 100% blocks executed 10%
       20:  583:int getCost(int cardNumber)
        -:  584:{
       20:  585:  switch( cardNumber ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
       20:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function adventurerEffect called 20 returned 100% blocks executed 100%
       20:  646:int adventurerEffect(struct gameState *state, int currentPlayer, int handPos) {
       20:  647:    int z = 0;// this is the counter for the temp hand
        -:  648:    int cardDrawn;
        -:  649:    int temphand[MAX_HAND];
       20:  650:    int drawntreasure=0;
        -:  651:
      433:  652:    while(drawntreasure<2){
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
      393:  653:        if (state->deckCount[currentPlayer] < 1){   //if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 19% (fallthrough)
branch  1 taken 81%
       74:  654:            shuffle(currentPlayer, state);
call    0 returned 100%
        -:  655:        }
      393:  656:        drawCard(currentPlayer, state);
call    0 returned 100%
      393:  657:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  658://        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      393:  659:        if (cardDrawn == copper || cardDrawn == silver) // assignment 2 bug
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
       40:  660:            drawntreasure++;
        -:  661:        else{
      353:  662:            temphand[z]=cardDrawn;
      353:  663:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      353:  664:            z++;
        -:  665:        }
        -:  666:    }
      393:  667:    while(z-1>=0){
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
      353:  668:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
      353:  669:        z=z-1;
        -:  670:    }
        -:  671:
        -:  672:    //discard played card from hand
       20:  673:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  674:
       20:  675:    return 0;
        -:  676:}
        -:  677:
function council_roomEffect called 20 returned 100% blocks executed 100%
       20:  678:int council_roomEffect(struct gameState *state, int currentPlayer, int handPos){
        -:  679:    int i;
        -:  680:    //+4 Cards
      100:  681:    for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  682:    {
       80:  683:        drawCard(currentPlayer, state);
call    0 returned 100%
        -:  684:    }
        -:  685:
        -:  686:    //+1 Buy
       20:  687:    state->numBuys++;
        -:  688:
        -:  689:    //Each other player draws a card
        -:  690://    for (i = 0; i < state->numPlayers; i++)
       80:  691:    for (i = 0; i < state->numPlayers - 1; i++) // assignment 2 bug
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  692:    {
       60:  693:        if ( i != currentPlayer )
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  694:        {
       40:  695:            drawCard(i, state);
call    0 returned 100%
        -:  696:        }
        -:  697:    }
        -:  698:
        -:  699:    //put played card in played card pile
       20:  700:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  701:
       20:  702:    return 0;
        -:  703:}
        -:  704:
function feastEffect called 20 returned 100% blocks executed 94%
       20:  705:int feastEffect(struct gameState *state, int currentPlayer, int choice1){
        -:  706:    int temphand[MAX_HAND];
        -:  707:    int i;
        -:  708:
        -:  709:    //gain card with cost up to 5
        -:  710:    //Backup hand
      310:  711:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  712://        temphand[i] = state->hand[currentPlayer][i];//Backup card
      290:  713:        temphand[i+1] = state->hand[currentPlayer][i];// assignment 2 bug
      290:  714:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  715:    }
        -:  716:    //Backup hand
        -:  717:
        -:  718:    //Update Coins for Buy
       20:  719:    updateCoins(currentPlayer, state, 5);
call    0 returned 100%
       20:  720:    int x = 1;//Condition to loop on
       60:  721:    while( x == 1) {//Buy one card
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
       20:  722:        if (supplyCount(choice1, state) <= 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  723:            if (DEBUG)
        -:  724:                printf("None of that card left, sorry!\n");
        -:  725:
        -:  726:            if (DEBUG){
        -:  727:                printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  728:            }
        -:  729:        }
       20:  730:        else if (state->coins < getCost(choice1)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  731:            printf("That card is too expensive!\n");
call    0 never executed
        -:  732:
        -:  733:            if (DEBUG){
        -:  734:                printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  735:            }
        -:  736:        }
        -:  737:        else{
        -:  738:
        -:  739:            if (DEBUG){
        -:  740:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  741:            }
        -:  742:
       20:  743:            gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 returned 100%
       20:  744:            x = 0;//No more buying cards
        -:  745:
        -:  746:            if (DEBUG){
        -:  747:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  748:            }
        -:  749:
        -:  750:        }
        -:  751:    }
        -:  752:
        -:  753:    //Reset Hand
      310:  754:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
      290:  755:        state->hand[currentPlayer][i] = temphand[i];
      290:  756:        temphand[i] = -1;
        -:  757:    }
        -:  758:
       20:  759:    return 0;
        -:  760:}
        -:  761:
function mineEffect called 0 returned 0% blocks executed 0%
    #####:  762:int mineEffect(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos){
        -:  763:    int i;
        -:  764:    int j;
        -:  765:
    #####:  766:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  767:
    #####:  768:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  769:    {
    #####:  770:        return -1;
        -:  771:    }
        -:  772:
    #####:  773:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  774:    {
    #####:  775:        return -1;
        -:  776:    }
        -:  777:
    #####:  778:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  779:    {
    #####:  780:        return -1;
        -:  781:    }
        -:  782:
    #####:  783:    gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  784:
        -:  785:    //discard card from hand
    #####:  786:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  787:
        -:  788:    //discard trashed card
    #####:  789:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  790:    {
    #####:  791:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  792:        {
    #####:  793:            discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  794:            break;
        -:  795:        }
        -:  796:    }
        -:  797:
    #####:  798:    return 0;
        -:  799:}
        -:  800:
function smithyEffect called 0 returned 0% blocks executed 0%
    #####:  801:int smithyEffect(struct gameState *state, int currentPlayer,int handPos){
        -:  802:    int i;
        -:  803:    //+3 Cards
        -:  804://    for (i = 0; i < 3; i++)
    #####:  805:    for (i = 0; i < 4; i++) // assignment 2 bug
branch  0 never executed
branch  1 never executed
        -:  806:    {
    #####:  807:        drawCard(currentPlayer, state);
call    0 never executed
        -:  808:    }
        -:  809:
        -:  810:    //discard card from hand
    #####:  811:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  812:    return 0;
        -:  813:}
        -:  814:
function cardEffect called 20 returned 100% blocks executed 4%
       20:  815:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  816:{
        -:  817:  int i;
        -:  818:  int j;
        -:  819:  int k;
        -:  820:  //int x;
        -:  821:  int index;
       20:  822:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       20:  823:  int nextPlayer = currentPlayer + 1;
        -:  824:
       20:  825:  int tributeRevealedCards[2] = {-1, -1};
        -:  826: // int temphand[MAX_HAND];// moved above the if statement
       20:  827:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  828:    nextPlayer = 0;
        -:  829:  }
        -:  830:  
        -:  831:	
        -:  832:  //uses switch to select card and perform actions
       20:  833:  switch( card ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  834:    {
        -:  835:    case adventurer:
       20:  836:        adventurerEffect(state, currentPlayer, handPos);
call    0 returned 100%
        -:  837:			
        -:  838:    case council_room:
       20:  839:        council_roomEffect(state, currentPlayer, handPos);
call    0 returned 100%
        -:  840:			
        -:  841:    case feast:
       20:  842:        feastEffect(state, currentPlayer, choice1);
call    0 returned 100%
        -:  843:			
        -:  844:    case gardens:
       20:  845:      return -1;
        -:  846:			
        -:  847:    case mine:
    #####:  848:        mineEffect(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
        -:  849:			
        -:  850:    case remodel:
    #####:  851:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  852:
    #####:  853:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  854:	{
    #####:  855:	  return -1;
        -:  856:	}
        -:  857:
    #####:  858:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  859:
        -:  860:      //discard card from hand
    #####:  861:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  862:
        -:  863:      //discard trashed card
    #####:  864:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  865:	{
    #####:  866:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  867:	    {
    #####:  868:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  869:	      break;
        -:  870:	    }
        -:  871:	}
        -:  872:
        -:  873:
    #####:  874:      return 0;
        -:  875:		
        -:  876:    case smithy:
    #####:  877:      smithyEffect(state, currentPlayer, handPos);
call    0 never executed
        -:  878:		
        -:  879:    case village:
        -:  880:      //+1 Card
    #####:  881:      drawCard(currentPlayer, state);
call    0 never executed
        -:  882:			
        -:  883:      //+2 Actions
    #####:  884:      state->numActions = state->numActions + 2;
        -:  885:			
        -:  886:      //discard played card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  888:      return 0;
        -:  889:		
        -:  890:    case baron:
        -:  891:      //discard played card from hand
    #####:  892:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  893:
    #####:  894:      state->numBuys++;//Increase buys by 1!
    #####:  895:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  896:	int p = 0;//Iterator for hand!
    #####:  897:	int card_not_discarded = 1;//Flag for discard set!
    #####:  898:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  899:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  900:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  901:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  902:	    state->discardCount[currentPlayer]++;
    #####:  903:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  904:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  905:	    }
    #####:  906:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  907:	    state->handCount[currentPlayer]--;
    #####:  908:	    card_not_discarded = 0;//Exit the loop
        -:  909:	  }
    #####:  910:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  911:	    if(DEBUG) {
        -:  912:	      printf("No estate cards in your hand, invalid choice\n");
        -:  913:	      printf("Must gain an estate if there are any\n");
        -:  914:	    }
    #####:  915:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  916:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  917:	      state->supplyCount[estate]--;//Decrement estates
    #####:  918:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  919:		isGameOver(state);
call    0 never executed
        -:  920:	      }
        -:  921:	    }
    #####:  922:	    card_not_discarded = 0;//Exit the loop
        -:  923:	  }
        -:  924:			    
        -:  925:	  else{
    #####:  926:	    p++;//Next card
        -:  927:	  }
        -:  928:	}
        -:  929:      }
        -:  930:			    
        -:  931:      else{
    #####:  932:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  933:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  934:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  935:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  936:	    isGameOver(state);
call    0 never executed
        -:  937:	  }
        -:  938:	}
        -:  939:      }
        -:  940:	    
        -:  941:      
    #####:  942:      return 0;
        -:  943:		
        -:  944:    case great_hall:
        -:  945:      //+1 Card
    #####:  946:      drawCard(currentPlayer, state);
call    0 never executed
        -:  947:			
        -:  948:      //+1 Actions
    #####:  949:      state->numActions++;
        -:  950:			
        -:  951:      //discard card from hand
    #####:  952:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  953:      return 0;
        -:  954:		
        -:  955:    case minion:
        -:  956:      //+1 action
    #####:  957:      state->numActions++;
        -:  958:			
        -:  959:      //discard card from hand
    #####:  960:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  961:			
    #####:  962:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  963:	{
    #####:  964:	  state->coins = state->coins + 2;
        -:  965:	}
        -:  966:			
    #####:  967:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  968:	{
        -:  969:	  //discard hand
    #####:  970:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  971:	    {
    #####:  972:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  973:	    }
        -:  974:				
        -:  975:	  //draw 4
    #####:  976:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  977:	    {
    #####:  978:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  979:	    }
        -:  980:				
        -:  981:	  //other players discard hand and redraw if hand size > 4
    #####:  982:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  983:	    {
    #####:  984:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  985:		{
    #####:  986:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  987:		    {
        -:  988:		      //discard hand
    #####:  989:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  990:			{
    #####:  991:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  992:			}
        -:  993:							
        -:  994:		      //draw 4
    #####:  995:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  996:			{
    #####:  997:			  drawCard(i, state);
call    0 never executed
        -:  998:			}
        -:  999:		    }
        -: 1000:		}
        -: 1001:	    }
        -: 1002:				
        -: 1003:	}
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case steward:
    #####: 1007:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
        -: 1009:	  //+2 cards
    #####: 1010:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1011:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1012:	}
    #####: 1013:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1014:	{
        -: 1015:	  //+2 coins
    #####: 1016:	  state->coins = state->coins + 2;
        -: 1017:	}
        -: 1018:      else
        -: 1019:	{
        -: 1020:	  //trash 2 cards in hand
    #####: 1021:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1022:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1023:	}
        -: 1024:			
        -: 1025:      //discard card from hand
    #####: 1026:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1027:      return 0;
        -: 1028:		
        -: 1029:    case tribute:
    #####: 1030:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1031:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1032:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1033:	  state->deckCount[nextPlayer]--;
        -: 1034:	}
    #####: 1035:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1036:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1037:	  state->discardCount[nextPlayer]--;
        -: 1038:	}
        -: 1039:	else{
        -: 1040:	  //No Card to Reveal
        -: 1041:	  if (DEBUG){
        -: 1042:	    printf("No cards to reveal\n");
        -: 1043:	  }
        -: 1044:	}
        -: 1045:      }
        -: 1046:	    
        -: 1047:      else{
    #####: 1048:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1049:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1050:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1051:	    state->deckCount[nextPlayer]++;
    #####: 1052:	    state->discard[nextPlayer][i] = -1;
    #####: 1053:	    state->discardCount[nextPlayer]--;
        -: 1054:	  }
        -: 1055:			    
    #####: 1056:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1057:	} 
    #####: 1058:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1059:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1060:	state->deckCount[nextPlayer]--;
    #####: 1061:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1062:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1063:	state->deckCount[nextPlayer]--;
        -: 1064:      }    
        -: 1065:		       
    #####: 1066:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1067:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1068:	state->playedCardCount++;
    #####: 1069:	tributeRevealedCards[1] = -1;
        -: 1070:      }
        -: 1071:
    #####: 1072:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1073:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1074:	  state->coins += 2;
        -: 1075:	}
        -: 1076:		    
    #####: 1077:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1078:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1079:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1080:	}
        -: 1081:	else{//Action Card
    #####: 1082:	  state->numActions = state->numActions + 2;
        -: 1083:	}
        -: 1084:      }
        -: 1085:	    
    #####: 1086:      return 0;
        -: 1087:		
        -: 1088:    case ambassador:
    #####: 1089:      j = 0;		//used to check if player has enough cards to discard
        -: 1090:
    #####: 1091:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1092:	{
    #####: 1093:	  return -1;				
        -: 1094:	}
        -: 1095:
    #####: 1096:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1097:	{
    #####: 1098:	  return -1;
        -: 1099:	}
        -: 1100:
    #####: 1101:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1102:	{
    #####: 1103:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1104:	    {
    #####: 1105:	      j++;
        -: 1106:	    }
        -: 1107:	}
    #####: 1108:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1109:	{
    #####: 1110:	  return -1;				
        -: 1111:	}
        -: 1112:
        -: 1113:      if (DEBUG) 
        -: 1114:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1115:
        -: 1116:      //increase supply count for choosen card by amount being discarded
    #####: 1117:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1118:			
        -: 1119:      //each other player gains a copy of revealed card
    #####: 1120:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1121:	{
    #####: 1122:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1123:	    {
    #####: 1124:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1125:	    }
        -: 1126:	}
        -: 1127:
        -: 1128:      //discard played card from hand
    #####: 1129:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1130:
        -: 1131:      //trash copies of cards returned to supply
    #####: 1132:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1133:	{
    #####: 1134:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1135:	    {
    #####: 1136:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1137:		{
    #####: 1138:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1139:		  break;
        -: 1140:		}
        -: 1141:	    }
        -: 1142:	}			
        -: 1143:
    #####: 1144:      return 0;
        -: 1145:		
        -: 1146:    case cutpurse:
        -: 1147:
    #####: 1148:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1149:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1150:	{
    #####: 1151:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1152:	    {
    #####: 1153:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1154:		{
    #####: 1155:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1156:		    {
    #####: 1157:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1158:		      break;
        -: 1159:		    }
    #####: 1160:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1161:		    {
    #####: 1162:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1163:			{
        -: 1164:			  if (DEBUG)
        -: 1165:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1166:			}	
    #####: 1167:		      break;
        -: 1168:		    }		
        -: 1169:		}
        -: 1170:					
        -: 1171:	    }
        -: 1172:				
        -: 1173:	}				
        -: 1174:
        -: 1175:      //discard played card from hand
    #####: 1176:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1177:
    #####: 1178:      return 0;
        -: 1179:
        -: 1180:		
        -: 1181:    case embargo: 
        -: 1182:      //+2 Coins
    #####: 1183:      state->coins = state->coins + 2;
        -: 1184:			
        -: 1185:      //see if selected pile is in play
    #####: 1186:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1187:	{
    #####: 1188:	  return -1;
        -: 1189:	}
        -: 1190:			
        -: 1191:      //add embargo token to selected supply pile
    #####: 1192:      state->embargoTokens[choice1]++;
        -: 1193:			
        -: 1194:      //trash card
    #####: 1195:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1196:      return 0;
        -: 1197:		
        -: 1198:    case outpost:
        -: 1199:      //set outpost flag
    #####: 1200:      state->outpostPlayed++;
        -: 1201:			
        -: 1202:      //discard card
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1204:      return 0;
        -: 1205:		
        -: 1206:    case salvager:
        -: 1207:      //+1 buy
    #####: 1208:      state->numBuys++;
        -: 1209:			
    #####: 1210:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1211:	{
        -: 1212:	  //gain coins equal to trashed card
    #####: 1213:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1214:	  //trash card
    #####: 1215:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1216:	}
        -: 1217:			
        -: 1218:      //discard card
    #####: 1219:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case sea_hag:
    #####: 1223:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1224:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1225:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1226:	  state->discardCount[i]++;
    #####: 1227:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1228:	}
        -: 1229:      }
    #####: 1230:      return 0;
        -: 1231:		
        -: 1232:    case treasure_map:
        -: 1233:      //search hand for another treasure_map
    #####: 1234:      index = -1;
    #####: 1235:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1236:	{
    #####: 1237:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1238:	    {
    #####: 1239:	      index = i;
    #####: 1240:	      break;
        -: 1241:	    }
        -: 1242:	}
    #####: 1243:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1244:	{
        -: 1245:	  //trash both treasure cards
    #####: 1246:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1247:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1248:
        -: 1249:	  //gain 4 Gold cards
    #####: 1250:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1251:	    {
    #####: 1252:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1253:	    }
        -: 1254:				
        -: 1255:	  //return success
    #####: 1256:	  return 1;
        -: 1257:	}
        -: 1258:			
        -: 1259:      //no second treasure_map found in hand
    #####: 1260:      return -1;
        -: 1261:    }
        -: 1262:	
    #####: 1263:  return -1;
        -: 1264:}
        -: 1265:
function discardCard called 40 returned 100% blocks executed 78%
       40: 1266:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1267:{
        -: 1268:	
        -: 1269:  //if card is not trashed, added to Played pile 
       40: 1270:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1271:    {
        -: 1272:      //add card to played pile
       40: 1273:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       40: 1274:      state->playedCardCount++;
        -: 1275:    }
        -: 1276:	
        -: 1277:  //set played card to -1
       40: 1278:  state->hand[currentPlayer][handPos] = -1;
        -: 1279:	
        -: 1280:  //remove card from player's hand
       40: 1281:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
    #####: 1284:      state->handCount[currentPlayer]--;
        -: 1285:    }
       40: 1286:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1287:    {
        -: 1288:      //reduce number of cards in hand
    #####: 1289:      state->handCount[currentPlayer]--;
        -: 1290:    }
        -: 1291:  else 	
        -: 1292:    {
        -: 1293:      //replace discarded card with last card in hand
       40: 1294:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1295:      //set last card to -1
       40: 1296:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1297:      //reduce number of cards in hand
       40: 1298:      state->handCount[currentPlayer]--;
        -: 1299:    }
        -: 1300:	
       40: 1301:  return 0;
        -: 1302:}
        -: 1303:
function gainCard called 20 returned 100% blocks executed 70%
       20: 1304:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1305:{
        -: 1306:  //Note: supplyPos is enum of choosen card
        -: 1307:	
        -: 1308:  //check if supply pile is empty (0) or card is not used in game (-1)
       20: 1309:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1310:    {
    #####: 1311:      return -1;
        -: 1312:    }
        -: 1313:	
        -: 1314:  //added card for [whoseTurn] current player:
        -: 1315:  // toFlag = 0 : add to discard
        -: 1316:  // toFlag = 1 : add to deck
        -: 1317:  // toFlag = 2 : add to hand
        -: 1318:
       20: 1319:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1320:    {
    #####: 1321:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1322:      state->deckCount[player]++;
        -: 1323:    }
       20: 1324:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1325:    {
    #####: 1326:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1327:      state->handCount[player]++;
        -: 1328:    }
        -: 1329:  else
        -: 1330:    {
       20: 1331:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       20: 1332:      state->discardCount[player]++;
        -: 1333:    }
        -: 1334:	
        -: 1335:  //decrease number in supply pile
       20: 1336:  state->supplyCount[supplyPos]--;
        -: 1337:	 
       20: 1338:  return 0;
        -: 1339:}
        -: 1340:
function updateCoins called 40 returned 100% blocks executed 82%
       40: 1341:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1342:{
        -: 1343:  int i;
        -: 1344:	
        -: 1345:  //reset coin count
       40: 1346:  state->coins = 0;
        -: 1347:
        -: 1348:  //add coins for each Treasure card in player's hand
      410: 1349:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        -: 1350:    {
      370: 1351:      if (state->hand[player][i] == copper)
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
        -: 1352:	{
       66: 1353:	  state->coins += 1;
        -: 1354:	}
      304: 1355:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1356:	{
    #####: 1357:	  state->coins += 2;
        -: 1358:	}
      304: 1359:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1360:	{
    #####: 1361:	  state->coins += 3;
        -: 1362:	}	
        -: 1363:    }	
        -: 1364:
        -: 1365:  //add bonus
       40: 1366:  state->coins += bonus;
        -: 1367:
       40: 1368:  return 0;
        -: 1369:}
        -: 1370:
        -: 1371:
        -: 1372://end of dominion.c
        -: 1373:
