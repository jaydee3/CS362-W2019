Performing card test for Baron
Test 1: Player discards Estate  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 6  Ending handCount: 6
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 2: Player discards Estate  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 18  discardCount: 19
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 2  Ending Estate supply: 0
4 tests failed

Test 3: Player draws Estate from supply  Holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 12  discardCount: 13
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 3  Ending Estate supply: 1
4 tests failed

Test 4: Player discards Estate  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 1  discardCount: 2
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 2  Ending Estate supply: 0
4 tests failed

Test 5: Player discards Estate  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 9  Ending handCount: 9
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 6: Player draws Estate from supply  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 5  Ending handCount: 5
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 7: Player discards Estate  Holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 2: Played Baron card and discarded Estate card  Starting handCount: 12  Ending handCount: 11
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 8: Player discards Estate  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 2  Ending handCount: 2
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 9: Player draws Estate from supply  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 14  discardCount: 15
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 3  Ending Estate supply: 1
4 tests failed

Test 10: Player draws Estate from supply  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 1  Ending handCount: 1
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 11: Player draws Estate from supply  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 11  Ending handCount: 11
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 12: Player discards Estate  Not holding Estate  Estate in Supply
  TEST FAILED: Net loss in player's hand count should be 0: Played Baron card drew Estate card  Starting handCount: 11  Ending handCount: 10
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 3  discardCount: 4
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 3  Ending Estate supply: 3
5 tests failed

Test 13: Player draws Estate from supply  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 14  discardCount: 15
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 2  Ending Estate supply: 0
4 tests failed

Test 14: Player discards Estate  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 5  discardCount: 6
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 1  Ending Estate supply: -1
4 tests failed

Test 15: Player draws Estate from supply  Holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 14  discardCount: 15
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 3  Ending Estate supply: 1
4 tests failed

Test 16: Player draws Estate from supply  Holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 15  discardCount: 16
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 3  Ending Estate supply: 1
4 tests failed

Test 17: Player draws Estate from supply  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 7  Ending handCount: 7
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 18: Player discards Estate  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 16  discardCount: 17
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 1  Ending Estate supply: -1
4 tests failed

Test 19: Player draws Estate from supply  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 6  Ending handCount: 6
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 20: Player discards Estate  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 1  discardCount: 2
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 3  Ending Estate supply: 1
4 tests failed

Test 21: Player draws Estate from supply  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 4  discardCount: 5
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 2  Ending Estate supply: 0
4 tests failed

Test 22: Player discards Estate  Holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 2: Played Baron card and discarded Estate card  Starting handCount: 16  Ending handCount: 15
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 23: Player discards Estate  Holding Estate  Estate in Supply
  TEST FAILED: Net loss in player's hand count should be 2: Played Baron card and discarded Estate card  Starting handCount: 15  Ending handCount: 14
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 24: Player discards Estate  Holding Estate  Estate in Supply
  TEST FAILED: Net loss in player's hand count should be 2: Played Baron card and discarded Estate card  Starting handCount: 17  Ending handCount: 16
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 25: Player discards Estate  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 7  Ending handCount: 7
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 26: Player draws Estate from supply  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 14  Ending handCount: 14
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 27: Player draws Estate from supply  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 4  Ending handCount: 4
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 28: Player discards Estate  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 5  Ending handCount: 5
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 29: Player discards Estate  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 11  discardCount: 12
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 2  Ending Estate supply: 0
4 tests failed

Test 30: Player discards Estate  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 11  discardCount: 12
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 3  Ending Estate supply: 1
4 tests failed

Test 31: Player draws Estate from supply  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 11  discardCount: 12
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 2  Ending Estate supply: 0
4 tests failed

Test 32: Player discards Estate  Not holding Estate  Estate in Supply
  TEST FAILED: Net loss in player's hand count should be 0: Played Baron card drew Estate card  Starting handCount: 3  Ending handCount: 2
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 7  discardCount: 8
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 1  Ending Estate supply: 1
5 tests failed

Test 33: Player discards Estate  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 9  discardCount: 10
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 2  Ending Estate supply: 0
4 tests failed

Test 34: Player draws Estate from supply  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 4  Ending handCount: 4
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 35: Player discards Estate  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 9  Ending handCount: 9
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 36: Player draws Estate from supply  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 5  discardCount: 6
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 2  Ending Estate supply: 0
4 tests failed

Test 37: Player discards Estate  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 17  discardCount: 18
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 2  Ending Estate supply: 0
4 tests failed

Test 38: Player draws Estate from supply  Holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 12  Ending handCount: 12
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 39: Player draws Estate from supply  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 14  discardCount: 15
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 2  Ending Estate supply: 0
4 tests failed

Test 40: Player draws Estate from supply  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 3  discardCount: 4
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 1  Ending Estate supply: -1
4 tests failed

Test 41: Player draws Estate from supply  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 6  discardCount: 7
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 2  Ending Estate supply: 0
4 tests failed

Test 42: Player draws Estate from supply  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 2  Ending handCount: 2
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 43: Player discards Estate  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 19  Ending handCount: 19
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 44: Player draws Estate from supply  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 4  discardCount: 5
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 2  Ending Estate supply: 0
4 tests failed

Test 45: Player discards Estate  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 7  Ending handCount: 7
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 46: Player draws Estate from supply  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 20  Ending handCount: 20
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 47: Player discards Estate  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 11  Ending handCount: 11
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 48: Player draws Estate from supply  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 20  discardCount: 21
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 3  Ending Estate supply: 1
4 tests failed

Test 49: Player draws Estate from supply  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 1  discardCount: 2
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 2  Ending Estate supply: 0
4 tests failed

Test 50: Player draws Estate from supply  Holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 7  Ending handCount: 7
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 51: Player draws Estate from supply  Holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 7  Ending handCount: 7
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 52: Player draws Estate from supply  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 3  discardCount: 4
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 2  Ending Estate supply: 0
4 tests failed

Test 53: Player discards Estate  Not holding Estate  No Estate in supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 9  discardCount: 10
3 tests failed

Test 54: Player draws Estate from supply  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 14  Ending handCount: 14
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 55: Player draws Estate from supply  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 2  Ending handCount: 2
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 56: Player discards Estate  Holding Estate  Estate in Supply
  TEST FAILED: Net loss in player's hand count should be 2: Played Baron card and discarded Estate card  Starting handCount: 18  Ending handCount: 17
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 57: Player discards Estate  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 3  Ending handCount: 3
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 58: Player discards Estate  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 12  discardCount: 13
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 3  Ending Estate supply: 1
4 tests failed

Test 59: Player discards Estate  Holding Estate  Estate in Supply
  TEST FAILED: Net loss in player's hand count should be 2: Played Baron card and discarded Estate card  Starting handCount: 17  Ending handCount: 16
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 60: Player draws Estate from supply  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 12  Ending handCount: 12
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 61: Player draws Estate from supply  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 5  discardCount: 6
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 3  Ending Estate supply: 1
4 tests failed

Test 62: Player draws Estate from supply  Holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 19  Ending handCount: 19
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 63: Player draws Estate from supply  Holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 2  discardCount: 3
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 2  Ending Estate supply: 0
4 tests failed

Test 64: Player discards Estate  Holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 2: Played Baron card and discarded Estate card  Starting handCount: 17  Ending handCount: 16
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 65: Player draws Estate from supply  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 19  Ending handCount: 19
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 66: Player draws Estate from supply  Holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 18  Ending handCount: 18
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 67: Player draws Estate from supply  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 10  discardCount: 11
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 1  Ending Estate supply: -1
4 tests failed

Test 68: Player discards Estate  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 13  Ending handCount: 13
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 69: Player draws Estate from supply  Holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 13  discardCount: 14
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 2  Ending Estate supply: 0
4 tests failed

Test 70: Player discards Estate  Holding Estate  Estate in Supply
  TEST FAILED: Net loss in player's hand count should be 2: Played Baron card and discarded Estate card  Starting handCount: 15  Ending handCount: 14
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 71: Player draws Estate from supply  Holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 3  discardCount: 4
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 2  Ending Estate supply: 0
4 tests failed

Test 72: Player draws Estate from supply  Holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 19  Ending handCount: 19
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 73: Player draws Estate from supply  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 12  Ending handCount: 12
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 74: Player draws Estate from supply  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 18  Ending handCount: 18
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 75: Player draws Estate from supply  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 8  discardCount: 9
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 2  Ending Estate supply: 0
4 tests failed

Test 76: Player discards Estate  Holding Estate  No Estate in supply
  TEST FAILED: Coins should have increased by 4  Starting coins: 4  Ending coins: 4
  TEST FAILED: Net loss in player's hand count should be 2: Played Baron card and discarded Estate card  Starting handCount: 1  Ending handCount: 1
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be 1  Expected count: 3  discardCount: 2
  TEST FAILED: Estate is not on top of the discarded card pile
6 tests failed

Test 77: Player discards Estate  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 3  Ending handCount: 3
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 78: Player discards Estate  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 14  Ending handCount: 14
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 79: Player discards Estate  Holding Estate  Estate in Supply
  TEST FAILED: Net loss in player's hand count should be 2: Played Baron card and discarded Estate card  Starting handCount: 18  Ending handCount: 17
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 80: Player discards Estate  Holding Estate  Estate in Supply
  TEST FAILED: Net loss in player's hand count should be 2: Played Baron card and discarded Estate card  Starting handCount: 14  Ending handCount: 13
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 81: Player discards Estate  Holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 2: Played Baron card and discarded Estate card  Starting handCount: 5  Ending handCount: 4
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 82: Player draws Estate from supply  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 1  Ending handCount: 1
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 83: Player discards Estate  Not holding Estate  Estate in Supply
  TEST FAILED: Net loss in player's hand count should be 0: Played Baron card drew Estate card  Starting handCount: 1  Ending handCount: 0
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 11  discardCount: 12
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 1  Ending Estate supply: 1
5 tests failed

Test 84: Player discards Estate  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 6  Ending handCount: 6
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 85: Player discards Estate  Holding Estate  Estate in Supply
  TEST FAILED: Net loss in player's hand count should be 2: Played Baron card and discarded Estate card  Starting handCount: 16  Ending handCount: 15
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 86: Player draws Estate from supply  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 1  Ending handCount: 1
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 87: Player discards Estate  Holding Estate  No Estate in supply
  TEST FAILED: Coins should have increased by 4  Starting coins: 3  Ending coins: 3
  TEST FAILED: Net loss in player's hand count should be 2: Played Baron card and discarded Estate card  Starting handCount: 18  Ending handCount: 18
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be 1  Expected count: 5  discardCount: 4
  TEST FAILED: Estate is not on top of the discarded card pile
6 tests failed

Test 88: Player draws Estate from supply  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 9  Ending handCount: 9
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 89: Player draws Estate from supply  Holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 16  discardCount: 17
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 1  Ending Estate supply: -1
4 tests failed

Test 90: Player draws Estate from supply  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 19  discardCount: 20
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 3  Ending Estate supply: 1
4 tests failed

Test 91: Player draws Estate from supply  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 16  discardCount: 17
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 3  Ending Estate supply: 1
4 tests failed

Test 92: Player discards Estate  Not holding Estate  Estate in Supply
  TEST FAILED: Net loss in player's hand count should be 0: Played Baron card drew Estate card  Starting handCount: 13  Ending handCount: 12
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 1  discardCount: 2
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 3  Ending Estate supply: 3
5 tests failed

Test 93: Player draws Estate from supply  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 7  discardCount: 8
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 2  Ending Estate supply: 0
4 tests failed

Test 94: Player draws Estate from supply  Holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 9  discardCount: 10
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 1  Ending Estate supply: -1
4 tests failed

Test 95: Player discards Estate  Holding Estate  Estate in Supply
  TEST FAILED: Net loss in player's hand count should be 2: Played Baron card and discarded Estate card  Starting handCount: 17  Ending handCount: 16
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 96: Player draws Estate from supply  Holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 7  discardCount: 8
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 3  Ending Estate supply: 1
4 tests failed

Test 97: Player discards Estate  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 17  Ending handCount: 17
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 98: Player discards Estate  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 9  discardCount: 10
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 3  Ending Estate supply: 1
4 tests failed

Test 99: Player discards Estate  Not holding Estate  No Estate in supply
  TEST FAILED: Net loss in player's hand count should be 1: Played Baron card  Starting handCount: 6  Ending handCount: 6
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
3 tests failed

Test 100: Player discards Estate  Not holding Estate  Estate in Supply
  TEST FAILED: Number of played cards should have increased by 1  Expected # of played cards: 1  playedCardCount: 0
  TEST FAILED: Baron is not on top of the played card pile
  TEST FAILED: Number of discarded cards should be equal to the starting number of discarded cards  Expected count: 5  discardCount: 6
  TEST FAILED: Ending Estate supply should be 1 less than starting Estate supply  Starting Estate supply: 1  Ending Estate supply: -1
4 tests failed

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:61.54% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'cardEffect'
Lines executed:18.48% of 184
Branches executed:26.45% of 155
Taken at least once:12.90% of 155
Calls executed:17.31% of 52

Function 'smithyEffect'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 2

Function 'mineEffect'
Lines executed:0.00% of 15
Branches executed:0.00% of 14
Taken at least once:0.00% of 14
Calls executed:0.00% of 5

Function 'feastEffect'
Lines executed:0.00% of 16
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 5

Function 'council_roomEffect'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'adventurerEffect'
Lines executed:0.00% of 17
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:36.36% of 22
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
Calls executed:0.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:80.00% of 10
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:93.75% of 16
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:85.48% of 62
Branches executed:100.00% of 46
Taken at least once:82.61% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:25.81% of 558
Branches executed:29.64% of 415
Taken at least once:20.24% of 415
Calls executed:17.89% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 6000 returned 100% blocks executed 83%
     6000:    8:int compare(const void* a, const void* b) {
     6000:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     6000:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
     1600:   12:    return -1;
     4400:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 100 returned 100% blocks executed 89%
      100:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      100:   44:  SelectStream(1);
call    0 returned 100%
      100:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
      100:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      100:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1100:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
    11000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
    10000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      100:   73:  if (numPlayers == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      100:   77:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      100:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      100:   87:  if (numPlayers == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      100:   95:      state->supplyCount[estate] = 12;
      100:   96:      state->supplyCount[duchy] = 12;
      100:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      100:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      100:  102:  state->supplyCount[silver] = 40;
      100:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     2100:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
    16500:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
    15500:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
      400:  115:		  if (numPlayers == 2){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      200:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      800:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    14500:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      500:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  139:    {
      400:  140:      state->deckCount[i] = 0;
     1600:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
     1200:  143:	  state->deck[i][j] = estate;
     1200:  144:	  state->deckCount[i]++;
        -:  145:	}
     3200:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
     2800:  148:	  state->deck[i][j] = copper;
     2800:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      500:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  155:    {
      400:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      500:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      400:  166:      state->handCount[i] = 0;
      400:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     2800:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     2700:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      100:  182:  state->outpostPlayed = 0;
      100:  183:  state->phase = 0;
      100:  184:  state->numActions = 1;
      100:  185:  state->numBuys = 1;
      100:  186:  state->playedCardCount = 0;
      100:  187:  state->whoseTurn = 0;
      100:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      600:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      500:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
      100:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
      100:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 400 returned 100% blocks executed 94%
      400:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      400:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      400:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
      400:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     4800:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     4000:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     4000:  216:    newDeck[newDeckPos] = state->deck[player][card];
     4000:  217:    newDeckPos++;
    13010:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
     9010:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     4000:  221:    state->deckCount[player]--;
        -:  222:  }
     4400:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     4000:  224:    state->deck[player][i] = newDeck[i];
     4000:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      400:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 160 returned 100% blocks executed 100%
      160:  320:int supplyCount(int card, struct gameState *state) {
      160:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 100 returned 100% blocks executed 100%
      100:  346:int whoseTurn(struct gameState *state) {
      100:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 19 returned 100% blocks executed 82%
       19:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       19:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       19:  401:  j = 0;
      494:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      475:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  405:	{
       19:  406:	  j++;
        -:  407:	}
        -:  408:    }
       19:  409:  if ( j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
       19:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 500 returned 100% blocks executed 38%
      500:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      500:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      500:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      500:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      500:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      500:  576:    state->deckCount[player]--;
      500:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      500:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function adventurerEffect called 0 returned 0% blocks executed 0%
    #####:  646:int adventurerEffect(struct gameState *state, int currentPlayer) {
    #####:  647:    int z = 0;// this is the counter for the temp hand
        -:  648:    int cardDrawn;
        -:  649:    int temphand[MAX_HAND];
    #####:  650:    int drawntreasure=0;
        -:  651:
    #####:  652:    while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  653:        if (state->deckCount[currentPlayer] < 1){   //if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  654:            shuffle(currentPlayer, state);
call    0 never executed
        -:  655:        }
    #####:  656:        drawCard(currentPlayer, state);
call    0 never executed
    #####:  657:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  658://        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  659:        if (cardDrawn == copper || cardDrawn == silver) // assignment 2 bug
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  660:            drawntreasure++;
        -:  661:        else{
    #####:  662:            temphand[z]=cardDrawn;
    #####:  663:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  664:            z++;
        -:  665:        }
        -:  666:    }
    #####:  667:    while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  668:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  669:        z=z-1;
        -:  670:    }
        -:  671:
    #####:  672:    return 0;
        -:  673:}
        -:  674:
function council_roomEffect called 0 returned 0% blocks executed 0%
    #####:  675:int council_roomEffect(struct gameState *state, int currentPlayer, int handPos){
        -:  676:    int i;
        -:  677:    //+4 Cards
    #####:  678:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  679:    {
    #####:  680:        drawCard(currentPlayer, state);
call    0 never executed
        -:  681:    }
        -:  682:
        -:  683:    //+1 Buy
    #####:  684:    state->numBuys++;
        -:  685:
        -:  686:    //Each other player draws a card
        -:  687://    for (i = 0; i < state->numPlayers; i++)
    #####:  688:    for (i = 0; i < state->numPlayers - 1; i++) // assignment 2 bug
branch  0 never executed
branch  1 never executed
        -:  689:    {
    #####:  690:        if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  691:        {
    #####:  692:            drawCard(i, state);
call    0 never executed
        -:  693:        }
        -:  694:    }
        -:  695:
        -:  696:    //put played card in played card pile
    #####:  697:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  698:
    #####:  699:    return 0;
        -:  700:}
        -:  701:
function feastEffect called 0 returned 0% blocks executed 0%
    #####:  702:int feastEffect(struct gameState *state, int currentPlayer, int choice1){
        -:  703:    int temphand[MAX_HAND];
        -:  704:    int i;
        -:  705:
        -:  706:    //gain card with cost up to 5
        -:  707:    //Backup hand
    #####:  708:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
        -:  709://        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  710:        temphand[i+1] = state->hand[currentPlayer][i];// assignment 2 bug
    #####:  711:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  712:    }
        -:  713:    //Backup hand
        -:  714:
        -:  715:    //Update Coins for Buy
    #####:  716:    updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  717:    int x = 1;//Condition to loop on
    #####:  718:    while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  719:        if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  720:            if (DEBUG)
        -:  721:                printf("None of that card left, sorry!\n");
        -:  722:
        -:  723:            if (DEBUG){
        -:  724:                printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  725:            }
        -:  726:        }
    #####:  727:        else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  728:            printf("That card is too expensive!\n");
call    0 never executed
        -:  729:
        -:  730:            if (DEBUG){
        -:  731:                printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  732:            }
        -:  733:        }
        -:  734:        else{
        -:  735:
        -:  736:            if (DEBUG){
        -:  737:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  738:            }
        -:  739:
    #####:  740:            gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  741:            x = 0;//No more buying cards
        -:  742:
        -:  743:            if (DEBUG){
        -:  744:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  745:            }
        -:  746:
        -:  747:        }
        -:  748:    }
        -:  749:
        -:  750:    //Reset Hand
    #####:  751:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  752:        state->hand[currentPlayer][i] = temphand[i];
    #####:  753:        temphand[i] = -1;
        -:  754:    }
        -:  755:
    #####:  756:    return 0;
        -:  757:}
        -:  758:
function mineEffect called 0 returned 0% blocks executed 0%
    #####:  759:int mineEffect(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos){
        -:  760:    int i;
        -:  761:    int j;
        -:  762:
    #####:  763:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  764:
    #####:  765:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  766:    {
    #####:  767:        return -1;
        -:  768:    }
        -:  769:
    #####:  770:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  771:    {
    #####:  772:        return -1;
        -:  773:    }
        -:  774:
    #####:  775:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  776:    {
    #####:  777:        return -1;
        -:  778:    }
        -:  779:
    #####:  780:    gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  781:
        -:  782:    //discard card from hand
    #####:  783:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  784:
        -:  785:    //discard trashed card
    #####:  786:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  787:    {
    #####:  788:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  789:        {
    #####:  790:            discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  791:            break;
        -:  792:        }
        -:  793:    }
        -:  794:
    #####:  795:    return 0;
        -:  796:}
        -:  797:
function smithyEffect called 0 returned 0% blocks executed 0%
    #####:  798:int smithyEffect(struct gameState *state, int currentPlayer,int handPos){
        -:  799:    int i;
        -:  800:    //+3 Cards
        -:  801://    for (i = 0; i < 3; i++)
    #####:  802:    for (i = 0; i < 4; i++) // assignment 2 bug
branch  0 never executed
branch  1 never executed
        -:  803:    {
    #####:  804:        drawCard(currentPlayer, state);
call    0 never executed
        -:  805:    }
        -:  806:
        -:  807:    //discard card from hand
    #####:  808:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  809:    return 0;
        -:  810:}
        -:  811:
function cardEffect called 100 returned 100% blocks executed 15%
      100:  812:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  813:{
        -:  814:  int i;
        -:  815:  int j;
        -:  816:  int k;
        -:  817:  //int x;
        -:  818:  int index;
      100:  819:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
      100:  820:  int nextPlayer = currentPlayer + 1;
        -:  821:
      100:  822:  int tributeRevealedCards[2] = {-1, -1};
        -:  823: // int temphand[MAX_HAND];// moved above the if statement
      100:  824:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  825:    nextPlayer = 0;
        -:  826:  }
        -:  827:  
        -:  828:	
        -:  829:  //uses switch to select card and perform actions
      100:  830:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 100%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  831:    {
        -:  832:    case adventurer:
    #####:  833:        adventurerEffect(state, currentPlayer);
call    0 never executed
        -:  834:			
        -:  835:    case council_room:
    #####:  836:        council_roomEffect(state, currentPlayer, handPos);
call    0 never executed
        -:  837:			
        -:  838:    case feast:
    #####:  839:        feastEffect(state, currentPlayer, choice1);
call    0 never executed
        -:  840:			
        -:  841:    case gardens:
    #####:  842:      return -1;
        -:  843:			
        -:  844:    case mine:
    #####:  845:        mineEffect(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
        -:  846:			
        -:  847:    case remodel:
    #####:  848:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  849:
    #####:  850:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  851:	{
    #####:  852:	  return -1;
        -:  853:	}
        -:  854:
    #####:  855:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  856:
        -:  857:      //discard card from hand
    #####:  858:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  859:
        -:  860:      //discard trashed card
    #####:  861:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  862:	{
    #####:  863:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  864:	    {
    #####:  865:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  866:	      break;
        -:  867:	    }
        -:  868:	}
        -:  869:
        -:  870:
    #####:  871:      return 0;
        -:  872:		
        -:  873:    case smithy:
    #####:  874:      smithyEffect(state, currentPlayer, handPos);
call    0 never executed
        -:  875:		
        -:  876:    case village:
        -:  877:      //+1 Card
    #####:  878:      drawCard(currentPlayer, state);
call    0 never executed
        -:  879:			
        -:  880:      //+2 Actions
    #####:  881:      state->numActions = state->numActions + 2;
        -:  882:			
        -:  883:      //discard played card from hand
    #####:  884:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  885:      return 0;
        -:  886:		
        -:  887:    case baron:
      100:  888:      state->numBuys++;//Increase buys by 1!
      100:  889:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
       48:  890:	int p = 0;//Iterator for hand!
       48:  891:	int card_not_discarded = 1;//Flag for discard set!
      594:  892:	while(card_not_discarded){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      498:  893:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
       18:  894:	    state->coins += 4;//Add 4 coins to the amount of coins
       18:  895:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
       18:  896:	    state->discardCount[currentPlayer]++;
      115:  897:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
       97:  898:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  899:	    }
       18:  900:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
       18:  901:	    state->handCount[currentPlayer]--;
       18:  902:	    card_not_discarded = 0;//Exit the loop
        -:  903:	  }
      480:  904:	  else if (p > state->handCount[currentPlayer]){
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  905:	    if(DEBUG) {
        -:  906:	      printf("No estate cards in your hand, invalid choice\n");
        -:  907:	      printf("Must gain an estate if there are any\n");
        -:  908:	    }
       30:  909:	    if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 40% (fallthrough)
branch  2 taken 60%
       12:  910:	      gainCard(estate, state, 0, currentPlayer);
call    0 returned 100%
       12:  911:	      state->supplyCount[estate]--;//Decrement estates
       12:  912:	      if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 42% (fallthrough)
branch  2 taken 58%
        5:  913:		isGameOver(state);
call    0 returned 100%
        -:  914:	      }
        -:  915:	    }
       30:  916:	    card_not_discarded = 0;//Exit the loop
        -:  917:	  }
        -:  918:			    
        -:  919:	  else{
      450:  920:	    p++;//Next card
        -:  921:	  }
        -:  922:	}
        -:  923:      }
        -:  924:			    
        -:  925:      else{
       52:  926:	if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 52% (fallthrough)
branch  2 taken 48%
       27:  927:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
       27:  928:	  state->supplyCount[estate]--;//Decrement Estates
       27:  929:	  if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 52% (fallthrough)
branch  2 taken 48%
       14:  930:	    isGameOver(state);
call    0 returned 100%
        -:  931:	  }
        -:  932:	}
        -:  933:      }
        -:  934:	    
        -:  935:      
      100:  936:      return 0;
        -:  937:		
        -:  938:    case great_hall:
        -:  939:      //+1 Card
    #####:  940:      drawCard(currentPlayer, state);
call    0 never executed
        -:  941:			
        -:  942:      //+1 Actions
    #####:  943:      state->numActions++;
        -:  944:			
        -:  945:      //discard card from hand
    #####:  946:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  947:      return 0;
        -:  948:		
        -:  949:    case minion:
        -:  950:      //+1 action
    #####:  951:      state->numActions++;
        -:  952:			
        -:  953:      //discard card from hand
    #####:  954:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  955:			
    #####:  956:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  957:	{
    #####:  958:	  state->coins = state->coins + 2;
        -:  959:	}
        -:  960:			
    #####:  961:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  962:	{
        -:  963:	  //discard hand
    #####:  964:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  965:	    {
    #####:  966:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  967:	    }
        -:  968:				
        -:  969:	  //draw 4
    #####:  970:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  971:	    {
    #####:  972:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  973:	    }
        -:  974:				
        -:  975:	  //other players discard hand and redraw if hand size > 4
    #####:  976:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  977:	    {
    #####:  978:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  979:		{
    #####:  980:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  981:		    {
        -:  982:		      //discard hand
    #####:  983:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  984:			{
    #####:  985:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  986:			}
        -:  987:							
        -:  988:		      //draw 4
    #####:  989:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  990:			{
    #####:  991:			  drawCard(i, state);
call    0 never executed
        -:  992:			}
        -:  993:		    }
        -:  994:		}
        -:  995:	    }
        -:  996:				
        -:  997:	}
    #####:  998:      return 0;
        -:  999:		
        -: 1000:    case steward:
    #####: 1001:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1002:	{
        -: 1003:	  //+2 cards
    #####: 1004:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1005:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1006:	}
    #####: 1007:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
        -: 1009:	  //+2 coins
    #####: 1010:	  state->coins = state->coins + 2;
        -: 1011:	}
        -: 1012:      else
        -: 1013:	{
        -: 1014:	  //trash 2 cards in hand
    #####: 1015:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1016:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1017:	}
        -: 1018:			
        -: 1019:      //discard card from hand
    #####: 1020:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1021:      return 0;
        -: 1022:		
        -: 1023:    case tribute:
    #####: 1024:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1025:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1026:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1027:	  state->deckCount[nextPlayer]--;
        -: 1028:	}
    #####: 1029:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1030:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1031:	  state->discardCount[nextPlayer]--;
        -: 1032:	}
        -: 1033:	else{
        -: 1034:	  //No Card to Reveal
        -: 1035:	  if (DEBUG){
        -: 1036:	    printf("No cards to reveal\n");
        -: 1037:	  }
        -: 1038:	}
        -: 1039:      }
        -: 1040:	    
        -: 1041:      else{
    #####: 1042:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1043:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1044:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1045:	    state->deckCount[nextPlayer]++;
    #####: 1046:	    state->discard[nextPlayer][i] = -1;
    #####: 1047:	    state->discardCount[nextPlayer]--;
        -: 1048:	  }
        -: 1049:			    
    #####: 1050:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1051:	} 
    #####: 1052:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1054:	state->deckCount[nextPlayer]--;
    #####: 1055:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1056:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1057:	state->deckCount[nextPlayer]--;
        -: 1058:      }    
        -: 1059:		       
    #####: 1060:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1061:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1062:	state->playedCardCount++;
    #####: 1063:	tributeRevealedCards[1] = -1;
        -: 1064:      }
        -: 1065:
    #####: 1066:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1067:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1068:	  state->coins += 2;
        -: 1069:	}
        -: 1070:		    
    #####: 1071:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1072:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1073:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1074:	}
        -: 1075:	else{//Action Card
    #####: 1076:	  state->numActions = state->numActions + 2;
        -: 1077:	}
        -: 1078:      }
        -: 1079:	    
    #####: 1080:      return 0;
        -: 1081:		
        -: 1082:    case ambassador:
    #####: 1083:      j = 0;		//used to check if player has enough cards to discard
        -: 1084:
    #####: 1085:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
    #####: 1090:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1091:	{
    #####: 1092:	  return -1;
        -: 1093:	}
        -: 1094:
    #####: 1095:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1096:	{
    #####: 1097:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1098:	    {
    #####: 1099:	      j++;
        -: 1100:	    }
        -: 1101:	}
    #####: 1102:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1103:	{
    #####: 1104:	  return -1;				
        -: 1105:	}
        -: 1106:
        -: 1107:      if (DEBUG) 
        -: 1108:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1109:
        -: 1110:      //increase supply count for choosen card by amount being discarded
    #####: 1111:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1112:			
        -: 1113:      //each other player gains a copy of revealed card
    #####: 1114:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1115:	{
    #####: 1116:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1117:	    {
    #####: 1118:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1119:	    }
        -: 1120:	}
        -: 1121:
        -: 1122:      //discard played card from hand
    #####: 1123:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1124:
        -: 1125:      //trash copies of cards returned to supply
    #####: 1126:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1127:	{
    #####: 1128:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1129:	    {
    #####: 1130:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1131:		{
    #####: 1132:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1133:		  break;
        -: 1134:		}
        -: 1135:	    }
        -: 1136:	}			
        -: 1137:
    #####: 1138:      return 0;
        -: 1139:		
        -: 1140:    case cutpurse:
        -: 1141:
    #####: 1142:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1143:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1144:	{
    #####: 1145:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1146:	    {
    #####: 1147:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1148:		{
    #####: 1149:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1150:		    {
    #####: 1151:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1152:		      break;
        -: 1153:		    }
    #####: 1154:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1155:		    {
    #####: 1156:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1157:			{
        -: 1158:			  if (DEBUG)
        -: 1159:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1160:			}	
    #####: 1161:		      break;
        -: 1162:		    }		
        -: 1163:		}
        -: 1164:					
        -: 1165:	    }
        -: 1166:				
        -: 1167:	}				
        -: 1168:
        -: 1169:      //discard played card from hand
    #####: 1170:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1171:
    #####: 1172:      return 0;
        -: 1173:
        -: 1174:		
        -: 1175:    case embargo: 
        -: 1176:      //+2 Coins
    #####: 1177:      state->coins = state->coins + 2;
        -: 1178:			
        -: 1179:      //see if selected pile is in play
    #####: 1180:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1181:	{
    #####: 1182:	  return -1;
        -: 1183:	}
        -: 1184:			
        -: 1185:      //add embargo token to selected supply pile
    #####: 1186:      state->embargoTokens[choice1]++;
        -: 1187:			
        -: 1188:      //trash card
    #####: 1189:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1190:      return 0;
        -: 1191:		
        -: 1192:    case outpost:
        -: 1193:      //set outpost flag
    #####: 1194:      state->outpostPlayed++;
        -: 1195:			
        -: 1196:      //discard card
    #####: 1197:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1198:      return 0;
        -: 1199:		
        -: 1200:    case salvager:
        -: 1201:      //+1 buy
    #####: 1202:      state->numBuys++;
        -: 1203:			
    #####: 1204:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1205:	{
        -: 1206:	  //gain coins equal to trashed card
    #####: 1207:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1208:	  //trash card
    #####: 1209:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1210:	}
        -: 1211:			
        -: 1212:      //discard card
    #####: 1213:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1214:      return 0;
        -: 1215:		
        -: 1216:    case sea_hag:
    #####: 1217:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1218:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1219:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1220:	  state->discardCount[i]++;
    #####: 1221:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1222:	}
        -: 1223:      }
    #####: 1224:      return 0;
        -: 1225:		
        -: 1226:    case treasure_map:
        -: 1227:      //search hand for another treasure_map
    #####: 1228:      index = -1;
    #####: 1229:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1230:	{
    #####: 1231:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1232:	    {
    #####: 1233:	      index = i;
    #####: 1234:	      break;
        -: 1235:	    }
        -: 1236:	}
    #####: 1237:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1238:	{
        -: 1239:	  //trash both treasure cards
    #####: 1240:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1241:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1242:
        -: 1243:	  //gain 4 Gold cards
    #####: 1244:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1245:	    {
    #####: 1246:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1247:	    }
        -: 1248:				
        -: 1249:	  //return success
    #####: 1250:	  return 1;
        -: 1251:	}
        -: 1252:			
        -: 1253:      //no second treasure_map found in hand
    #####: 1254:      return -1;
        -: 1255:    }
        -: 1256:	
    #####: 1257:  return -1;
        -: 1258:}
        -: 1259:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1260:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1261:{
        -: 1262:	
        -: 1263:  //if card is not trashed, added to Played pile 
    #####: 1264:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1265:    {
        -: 1266:      //add card to played pile
    #####: 1267:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1268:      state->playedCardCount++;
        -: 1269:    }
        -: 1270:	
        -: 1271:  //set played card to -1
    #####: 1272:  state->hand[currentPlayer][handPos] = -1;
        -: 1273:	
        -: 1274:  //remove card from player's hand
    #####: 1275:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
    #####: 1280:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1281:    {
        -: 1282:      //reduce number of cards in hand
    #####: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
        -: 1285:  else 	
        -: 1286:    {
        -: 1287:      //replace discarded card with last card in hand
    #####: 1288:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1289:      //set last card to -1
    #####: 1290:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1291:      //reduce number of cards in hand
    #####: 1292:      state->handCount[currentPlayer]--;
        -: 1293:    }
        -: 1294:	
    #####: 1295:  return 0;
        -: 1296:}
        -: 1297:
function gainCard called 39 returned 100% blocks executed 70%
       39: 1298:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1299:{
        -: 1300:  //Note: supplyPos is enum of choosen card
        -: 1301:	
        -: 1302:  //check if supply pile is empty (0) or card is not used in game (-1)
       39: 1303:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1304:    {
    #####: 1305:      return -1;
        -: 1306:    }
        -: 1307:	
        -: 1308:  //added card for [whoseTurn] current player:
        -: 1309:  // toFlag = 0 : add to discard
        -: 1310:  // toFlag = 1 : add to deck
        -: 1311:  // toFlag = 2 : add to hand
        -: 1312:
       39: 1313:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1314:    {
    #####: 1315:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1316:      state->deckCount[player]++;
        -: 1317:    }
       39: 1318:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1319:    {
    #####: 1320:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1321:      state->handCount[player]++;
        -: 1322:    }
        -: 1323:  else
        -: 1324:    {
       39: 1325:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       39: 1326:      state->discardCount[player]++;
        -: 1327:    }
        -: 1328:	
        -: 1329:  //decrease number in supply pile
       39: 1330:  state->supplyCount[supplyPos]--;
        -: 1331:	 
       39: 1332:  return 0;
        -: 1333:}
        -: 1334:
function updateCoins called 100 returned 100% blocks executed 82%
      100: 1335:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1336:{
        -: 1337:  int i;
        -: 1338:	
        -: 1339:  //reset coin count
      100: 1340:  state->coins = 0;
        -: 1341:
        -: 1342:  //add coins for each Treasure card in player's hand
      600: 1343:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1344:    {
      500: 1345:      if (state->hand[player][i] == copper)
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
        -: 1346:	{
      348: 1347:	  state->coins += 1;
        -: 1348:	}
      152: 1349:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1350:	{
    #####: 1351:	  state->coins += 2;
        -: 1352:	}
      152: 1353:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1354:	{
    #####: 1355:	  state->coins += 3;
        -: 1356:	}	
        -: 1357:    }	
        -: 1358:
        -: 1359:  //add bonus
      100: 1360:  state->coins += bonus;
        -: 1361:
      100: 1362:  return 0;
        -: 1363:}
        -: 1364:
        -: 1365:
        -: 1366://end of dominion.c
        -: 1367:
